services:
  # =============================================================================
  # 基礎設施服務
  # =============================================================================
  
  # PostgreSQL 主資料庫
  postgres:
    image: postgres:15-alpine
    container_name: social-media-postgres
    environment:
      POSTGRES_DB: social_media_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d social_media_db"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - social-media-network
    restart: unless-stopped

  # Redis 快取和會話管理
  redis:
    image: redis:7-alpine
    container_name: social-media-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - social-media-network
    restart: unless-stopped

  # RustFS 對象存儲
  rustfs:
    image: rustfs/rustfs:latest
    container_name: social-media-rustfs
    ports:
      - "9000:9000"
    volumes:
      - ./storage/rustfs:/data
      - ./storage/rustfs-logs:/logs
    command: ["/usr/bin/rustfs", "--address", ":9000", "/data"]
    environment:
      - RUSTFS_ACCESS_KEY=rustfsadmin
      - RUSTFS_SECRET_KEY=rustfsadmin
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z localhost 9000"]
      start_period: 30s
      interval: 20s
      timeout: 5s
      retries: 5
    networks:
      - social-media-network

  # NATS JetStream 訊息佇列
  nats:
    image: nats:2.10-alpine
    container_name: social-media-nats
    ports:
      - "4223:4222"  # 改用 4223 避免衝突
      - "8223:8222"  # HTTP monitoring 改用 8223
    command: 
      - "--jetstream"
      - "--store_dir=/data"
      - "--http_port=8222"
      - "-a"
      - "0.0.0.0"
      - "-p"
      - "4222"
    volumes:
      - nats_data:/data
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - social-media-network
    restart: unless-stopped

  # =============================================================================
  # 監控和追蹤服務
  # =============================================================================

  # Jaeger 分散式追蹤 (暫時停用)
  # jaeger:
  #   image: jaegertracing/all-in-one:1.50
  #   container_name: social-media-jaeger
  #   ports:
  #     - "16686:16686"  # Jaeger UI
  #     - "14268:14268"  # HTTP collector
  #   environment:
  #     COLLECTOR_OTLP_ENABLED: true
  #   networks:
  #     - social-media-network

  # Prometheus 監控 (暫時停用)
  # prometheus:
  #   image: prom/prometheus:v2.45.0
  #   container_name: social-media-prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--web.enable-lifecycle'
  #   networks:
  #     - social-media-network

  # Grafana 視覺化 (暫時停用)
  # grafana:
  #   image: grafana/grafana:10.1.0
  #   container_name: social-media-grafana
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     GF_SECURITY_ADMIN_PASSWORD: admin
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
  #     - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
  #   networks:
  #     - social-media-network

  # =============================================================================
  # MCP Server 和核心服務
  # =============================================================================

  # MCP Server - Agent 註冊中心
  mcp-server:
    build:
      context: .
      dockerfile: mcp_server/Dockerfile
    container_name: social-media-mcp-server
    ports:
      - "10100:10100"
    environment:
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=10100
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/social_media_db
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
      - RUSTFS_ENDPOINT=http://rustfs:9000
      - RUSTFS_ACCESS_KEY=${RUSTFS_ACCESS_KEY:-rustfsadmin}
      - RUSTFS_SECRET_KEY=${RUSTFS_SECRET_KEY:-rustfsadmin}
      - RUSTFS_BUCKET=${RUSTFS_BUCKET:-social-media-content}
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rustfs:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - social-media-network
    command: ["uvicorn", "mcp_server.main:app", "--host", "0.0.0.0", "--port", "10100", "--log-level", "debug", "--reload"]

  # =============================================================================
  # AI Agent 服務
  # =============================================================================

  # Orchestrator Agent - 總協調器
  orchestrator-agent:
    build:
      context: .
      dockerfile: agents/orchestrator/Dockerfile
    container_name: social-media-orchestrator
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - AGENT_PORT=8000
      - MCP_SERVER_URL=http://mcp-server:10100
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/social_media_db
      - REDIS_URL=redis://redis:6379/0
      - NATS_URL=nats://nats:4222
      - ORCHESTRATOR_URL=http://orchestrator-agent:8000
      - CLARIFICATION_URL=http://clarification-agent:8004
      - CONTENT_WRITER_URL=http://content-writer-agent:8003
      - FORM_API_URL=http://form-api:8010
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mcp-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - social-media-network

  # Clarification Agent - 澄清問卷生成
  clarification-agent:
    build:
      context: .
      dockerfile: agents/clarification/Dockerfile
    container_name: social-media-clarifier
    ports:
      - "8004:8004"
    environment:
      - PYTHONPATH=/app
      - AGENT_PORT=8004
      - MCP_SERVER_URL=http://mcp-server:10100
      - REDIS_URL=redis://redis:6379/0
      - NATS_URL=nats://nats:4222
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/social_media_db
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mcp-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - social-media-network
    profiles:
      - tunnel

  # Content Writer Agent - 內容生成代理
  content-writer-agent:
    build:
      context: .
      dockerfile: agents/content_writer/Dockerfile
    container_name: social-media-writer
    ports:
      - "8003:8003"
    environment:
      - PYTHONPATH=/app
      - AGENT_PORT=8003
      - MCP_SERVER_URL=http://mcp-server:10100
      - REDIS_URL=redis://redis:6379/0
      - NATS_URL=nats://nats:4222
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/social_media_db
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mcp-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - social-media-network
    profiles:
      - tunnel

  # Content Generator Agent - 貼文生成服務
  content-generator-agent:
    build:
      context: .
      dockerfile: agents/content_generator/Dockerfile
    container_name: social-media-content-generator
    ports:
      - "8008:8008"
    environment:
      - PYTHONPATH=/app
      - AGENT_PORT=8008
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/social_media_db
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - social-media-network
    profiles:
      - tunnel

  # Form API - 表單處理服務
  form-api:
    build:
      context: .
      dockerfile: services/form_api/Dockerfile
    container_name: social-media-form-api
    ports:
      - "8010:8010"
    environment:
      - PYTHONPATH=/app
      - ORCHESTRATOR_URL=http://orchestrator-agent:8000
      - REDIS_URL=redis://redis:6379/0
      - CLARIFICATION_URL=http://clarification-agent:8004
      - CONTENT_WRITER_URL=http://content-writer-agent:8003
      - FORM_API_URL=http://form-api:8010
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      orchestrator-agent:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - social-media-network

  vision-agent:
    build:
      context: .
      dockerfile: ./agents/vision/Dockerfile
    container_name: social-media-vision
    ports:
      - "${AGENT_VISION_AGENT_PORT:-8005}:8005"
    environment:
      - PYTHONPATH=/app
      - POETRY_NO_INTERACTION=1
      - MCP_SERVER_URL=http://mcp-server:10100
      - AGENT_NAME=vision
      - AGENT_ROLE=vision
      - AGENT_PORT=8005
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/social_media_db
      - REDIS_URL=redis://redis:6379/0
      - RUSTFS_ENDPOINT=http://rustfs:9000
      - RUSTFS_ACCESS_KEY=rustfsadmin
      - RUSTFS_SECRET_KEY=rustfsadmin
      - RUSTFS_BUCKET=social-media-content
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mcp-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - social-media-network
    command: uvicorn agents.vision.main:app --host 0.0.0.0 --port 8005 --reload
    profiles:
      - tunnel

  # =============================================================================
  # Reader 服務集群 - 快速內容提取 (使用社群GHCR映像)
  # =============================================================================

  reader-1:
    image: ghcr.io/intergalacticalvariable/reader:latest
    container_name: social-media-reader-1
    environment:
      - NODE_ENV=production
      - PORT=3000
    volumes:
      - reader_cache_1:/tmp
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    networks:
      - social-media-network
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s

  reader-2:
    image: ghcr.io/intergalacticalvariable/reader:latest
    container_name: social-media-reader-2
    environment:
      - NODE_ENV=production
      - PORT=3000
    volumes:
      - reader_cache_2:/tmp
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    networks:
      - social-media-network
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s

  reader-3:
    image: ghcr.io/intergalacticalvariable/reader:latest
    container_name: social-media-reader-3
    environment:
      - NODE_ENV=production
      - PORT=3000
    volumes:
      - reader_cache_3:/tmp
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    networks:
      - social-media-network

  reader-4:
    image: ghcr.io/intergalacticalvariable/reader:latest
    container_name: social-media-reader-4
    environment:
      - NODE_ENV=production
      - PORT=3000
    volumes:
      - reader_cache_4:/tmp
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    networks:
      - social-media-network

  reader-lb:
    image: nginx:alpine
    container_name: social-media-reader-lb
    depends_on:
      - reader-1
      - reader-2
      - reader-3
      - reader-4
    volumes:
      - ./config/reader-nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8880:80"
    restart: unless-stopped
    networks:
      - social-media-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  playwright-crawler-agent:
    build:
      context: .
      dockerfile: ./agents/playwright_crawler/Dockerfile
    container_name: social-media-playwright-crawler
    ports:
      - "${AGENT_PLAYWRIGHT_CRAWLER_AGENT_PORT:-8006}:8006"
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - POETRY_NO_INTERACTION=1
      - MCP_SERVER_URL=http://mcp-server:10100
      - AGENT_NAME=playwright-crawler
      - AGENT_ROLE=playwright-crawler
      - AGENT_PORT=8006
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/social_media_db
      - REDIS_URL=redis://redis:6379/0
      - NATS_URL=nats://nats:4222
    env_file:
      - .env
    volumes:
      - .:/app
      # 持久化瀏覽器快取，避免每次重啟都重新下載
      - playwright_cache:/root/.cache/ms-playwright
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      mcp-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - social-media-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: '4G'
    command: python -m uvicorn agents.playwright_crawler.main:app --host 0.0.0.0 --port 8006 --reload
    profiles:
      - tunnel

  # Post Analyzer Agent - 貼文分析代理
  post-analyzer-agent:
    build:
      context: .
      dockerfile: agents/post_analyzer/Dockerfile
    container_name: social-media-post-analyzer
    ports:
      - "8007:8007"
    environment:
      - PYTHONPATH=/app
      - AGENT_PORT=8007
      - MCP_SERVER_URL=http://mcp-server:10100
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/social_media_db
      - REDIS_URL=redis://redis:6379/0
      - NATS_URL=nats://nats:4222
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mcp-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - social-media-network

  # =============================================================================
  # 用戶介面
  # =============================================================================

  # Streamlit UI - 用戶介面
  streamlit-ui:
    build:
      context: .
      dockerfile: ui/Dockerfile
    container_name: social-media-ui
    network_mode: host
    environment:
      - PYTHONPATH=/app
      - STREAMLIT_SERVER_PORT=8501
      - ORCHESTRATOR_URL=http://localhost:8000
      - FORM_API_URL=http://localhost:8010
      - DATABASE_URL=postgresql://postgres:password@localhost:5432/social_media_db
      - REDIS_URL=redis://localhost:6379/0
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      orchestrator-agent:
        condition: service_healthy
      form-api:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["python", "scripts/start_streamlit_ui.py"]

  # Pinggy Tunnel - 外網訪問
  pinggy-tunnel:
    image: pinggy/pinggy:latest
    container_name: social-media-pinggy
    network_mode: host
    tty: true                    # ★ 關鍵：等同 -t
    stdin_open: true             # ★ 關鍵：等同 -i

    command: [
      "-p", "443",
      "-R0:localhost:8501",
      "-o", "StrictHostKeyChecking=no",
      "-o", "ServerAliveInterval=30",
      "RdUOEHSfE2u@pro.pinggy.io"
    ]
    depends_on:
      streamlit-ui:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - tunnel

  # =============================================================================
  # 工具和維護服務
  # =============================================================================

  # 資料庫管理工具
  pgadmin:
    image: dpage/pgadmin4:7.8
    container_name: social-media-pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - social-media-network
    profiles:
      - tools

  # Redis 管理工具
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: social-media-redis-commander
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - social-media-network
    profiles:
      - tools

# =============================================================================
# 網路和存儲配置
# =============================================================================

networks:
  social-media-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rustfs_data:
    driver: local
  nats_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local
  playwright_cache:
    driver: local
  reader_cache_1:
    driver: local
  reader_cache_2:
    driver: local
  reader_cache_3:
    driver: local
  reader_cache_4:
    driver: local

# =============================================================================
# 使用說明
# =============================================================================

# 基本啟動：
# docker-compose up -d

# 包含管理工具：
# docker-compose --profile tools up -d

# 只啟動基礎設施：
# docker-compose up -d postgres redis nats jaeger

# 查看日誌：
# docker-compose logs -f [service-name]

# 停止所有服務：
# docker-compose down

# 清理所有數據：
# docker-compose down -v

# 重建特定服務：
# docker-compose up -d --build [service-name]